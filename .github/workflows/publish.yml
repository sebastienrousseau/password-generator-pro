name: "Build Password Generator Pro"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-binaries:
    name: "Build binaries"
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-22.04, macos-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install pNpM
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install pNpM dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      # https://tauri.app/v1/guides/getting-started/prerequisites/
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.0-dev \
              build-essential \
              curl \
              wget \
              libasound2-dev \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev

      - name: Add Rust build targets (Windows)
        if: runner.os == 'Windows'
        run: |
          rustup target add aarch64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
          rustup target add x86_64-pc-windows-msvc

      - name: Add Rust build targets (Linux)
        if: runner.os == 'Linux'
        run: |
          rustup target add x86_64-unknown-linux-gnu
      - name: Add Rust build targets (macOS)
        if: runner.os == 'macOS'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Cache Cargo dependencies
        id: cargo-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Install dependencies (windows only)
      #   if: matrix.platform == 'windows-latest'
      #   shell: pwsh
      #   run: |
      #     Invoke-WebRequest https://go.microsoft.com/fwlink/p/?LinkId=2124703 -OutFile installwebview.exe -UseBasicParsing
      #     cmd /C start /wait installwebview.exe /silent /install

      - name: Install app dependencies and build it
        run: pnpm run build

      - name: Build
        run: cd src-tauri && cargo build --verbose

      - name: Run tests
        run: cd src-tauri && cargo test --verbose

      - name: Tauri build
        uses: tauri-apps/tauri-action@v0
        # enable cache even though failed
        # continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: "Password Generator Pro v__VERSION__"
          releaseBody: "More new features are now supported."
          releaseDraft: true
          prerelease: false

      - name: Upload dist (Windows, Setup)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: win32-setup
          path: "out/*-setup-*.exe"

      - name: Upload dist (Windows, MSI)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: win32-msi
          path: "out/*-setup-msi-*.msi"

      - name: Upload dist (Windows, Standalone)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: win32-standalone
          path: "out/*-standalone-*.exe"

      - name: Upload dist (Linux, Deb)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: linux-deb
          path: "out/*.deb"

      - name: Upload dist (Linux, AppImage)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: linux-appimage
          path: "out/*.AppImage"

      - name: Upload dist (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: macos-dmg
          path: "out/*.dmg"
      # - uses: actions/upload-artifact@master
      #   with:
      #     name: binaries
      #     path: ${{ GITHUB.WORKSPACE }}/src-tauri/target/release/bundle/*/password-generator-pro*

      # - name: Compress releases
      #   run: zip -r /home/runner/work/code-macros/binaries.zip $GITHUB_WORKSPACE/src-tauri/target/release/bundle/*/password-generator-pro*
      # - name: Delete old release
      #   uses: Archaholic/action-delete-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      #   with:
      #     tag_name: rolling
      # - name: Update tag
      #   uses: EndBug/latest-tag@latest
      #   with:
      #     ref: rolling
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: Rolling release
      #     prerelease: true
      #     tag_name: rolling
      #     body: "Latest commit: ${{ github.event.head_commit.message }}"
      #     # files: |
      #       # /home/runner/work/code-macros/binaries.zip
      #       # ${{ GITHUB.WORKSPACE }}/src-tauri/target/release/bundle/*/password-generator-pro*
      #     files: ${{ GITHUB.WORKSPACE }}/src-tauri/target/release/bundle/*/password-generator-pro*
      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: binaries
      #     path: ${{ GITHUB.WORKSPACE }}/src-tauri/target/release/bundle/*/password-generator-pro*

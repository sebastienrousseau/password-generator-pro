name: "Build Password Generator Pro"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-binaries:
    name: "Build binaries"
    strategy:
      fail-fast: false
      matrix:
        rust_version: [stable]
        platform:
          # Windows
          - { id: windows, target: x86_64-pc-windows-msvc, os: windows-latest }
          - { id: windows, target: x86_64-linux-musl-gcc, os: windows-latest }
          - { id: windows, target: aarch64-pc-windows-msvc, os: windows-latest }

          # Ubuntu with default features
          - { id: ubuntu, target: x86_64-unknown-linux-gnu, os: ubuntu-latest }

          # macOS
          - { id: macos, target: x86_64-apple-darwin, os: macos-latest }
          - { id: macos, target: aarch64-apple-darwin, os: macos-latest }

    env:
      APP_VERSION: "0.0.1"
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      OPTIONS: ${{ matrix.platform.options }}
      FEATURES: ${{ format(',{0}', matrix.platform.features ) }}
      CMD: ${{ matrix.platform.cmd }}

    runs-on: ${{ matrix.platform.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Cache cargo folder
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ matrix.platform.target }}-${{ env.APP_VERSION }}

      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.rust_version }}

      - name: Install Gtk (ubuntu only)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            libasound2-dev \
            libayatana-appindicator3-dev \
            libgtk-3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libssl-dev \
            libwebkit2gtk-4.0-dev \
            wget \

      - name: Install GCC Multilib
        if: (matrix.platform.os == 'ubuntu-latest') && contains(matrix.platform.target, 'i686')
        run: sudo apt-get install gcc-multilib

      - name: Install cargo-apk
        if: contains(matrix.platform.target, 'android')
        run: cargo install cargo-apk

      - name: Build
        shell: bash
        run: cd src-tauri/ && cargo $CMD build --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES --release

      # - name: Install pNpM
      #   uses: pnpm/action-setup@v2.2.4
      #   with:
      #     version: 7

      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: ${{ matrix.node-version }}
      #     cache: "pnpm"

      # - name: Install pNpM dependencies
      #   run: pnpm install --frozen-lockfile

      # - name: Install Rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     profile: minimal
      #     override: true

      # - name: Rust Cache
      #   uses: Swatinem/rust-cache@v2
      #   with:
      #     workspaces: src-tauri

      # # https://tauri.app/v1/guides/getting-started/prerequisites/
      # - name: Install dependencies (Linux)
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt update
      #     sudo apt install -y libwebkit2gtk-4.0-dev \
      #         build-essential \
      #         curl \
      #         wget \
      #         libasound2-dev \
      #         libssl-dev \
      #         libgtk-3-dev \
      #         libayatana-appindicator3-dev \
      #         librsvg2-dev

      # - name: Add Rust build targets (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     rustup target add aarch64-pc-windows-msvc
      #     rustup target add i686-pc-windows-msvc
      #     rustup target add x86_64-pc-windows-msvc

      # - name: Add Rust build targets (Linux)
      #   if: runner.os == 'Linux'
      #   run: |
      #     rustup target add x86_64-unknown-linux-gnu
      # - name: Add Rust build targets (macOS)
      #   if: runner.os == 'macOS'
      #   run: |
      #     rustup target add aarch64-apple-darwin
      #     rustup target add x86_64-apple-darwin

      # - name: Cache Cargo dependencies
      #   id: cargo-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       src-tauri/target/
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Install app dependencies and build it
      #   run: pnpm run build

      # - name: Build
      #   run: cd src-tauri && cargo build --verbose

      # - name: Run tests
      #   run: cd src-tauri && cargo test --verbose

      # - name: Tauri build
      #   uses: tauri-apps/tauri-action@v0
      #   # enable cache even though failed
      #   # continue-on-error: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      #   with:
      #     tagName: v__VERSION__
      #     releaseName: "Password Generator Pro v__VERSION__"
      #     releaseBody: "More new features are now supported."
      #     releaseDraft: true
      #     prerelease: false

      # - name: Upload dist (Windows, Setup)
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: win32-setup
      #     path: "out/*-setup-*.exe"

      # - name: Upload dist (Windows, MSI)
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: win32-msi
      #     path: "out/*-setup-msi-*.msi"

      # - name: Upload dist (Windows, Standalone)
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: win32-standalone
      #     path: "out/*-standalone-*.exe"

      # - name: Upload dist (Linux, Deb)
      #   if: runner.os == 'Linux'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: linux-deb
      #     path: "out/*.deb"

      # - name: Upload dist (Linux, AppImage)
      #   if: runner.os == 'Linux'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: linux-appimage
      #     path: "out/*.AppImage"

      # - name: Upload dist (macOS)
      #   if: runner.os == 'macOS'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: macos-dmg
      #     path: "out/*.dmg"

      # - name: Upload dist (macOS, Standalone)
      #   if: runner.os == 'macOS'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: macos-standalone
      #     path: "out/*-standalone-*.zip"

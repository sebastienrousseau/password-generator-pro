name: "Build Password Generator Pro"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-binaries:
    name: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x]
        rust: [stable]
        platform:
          # Windows
          - { id: windows, target: x86_64-pc-windows-msvc, os: windows-latest }
          - { id: windows, target: aarch64-pc-windows-msvc, os: windows-latest }

          # Ubuntu with default features
          - { id: ubuntu, target: x86_64-unknown-linux-gnu, os: ubuntu-latest }

          # macOS
          - { id: macos, target: x86_64-apple-darwin, os: macos-latest }
          - { id: macos, target: aarch64-apple-darwin, os: macos-latest }

    runs-on: ${{ matrix.platform.os }}

    env:
      APP_VERSION: "0.0.1"
      CARGO_INCREMENTAL: 0
      CARGO_TERM_COLOR: always
      CMD: ${{ matrix.platform.cmd }}
      FEATURES: ${{ format(',{0}', matrix.platform.features ) }}
      OPTIONS: ${{ matrix.platform.options }}
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      RUSTFLAGS: "-C debuginfo=0"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pNpM
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install pNpM dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.rust_version }}

      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools

      - name: Release build
        uses: actions-rs/cargo@v1

      - name: Cache cargo folder
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ matrix.platform.target }}-${{ env.APP_VERSION }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.rust_version }}

      - name: Install Gtk (ubuntu only)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            libasound2-dev \
            libayatana-appindicator3-dev \
            libgtk-3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libssl-dev \
            libwebkit2gtk-4.0-dev \
            wget \

      - name: Install GCC Multilib
        if: (matrix.platform.os == 'ubuntu-latest') && contains(matrix.platform.target, 'i686')
        run: sudo apt-get install gcc-multilib

      - name: Install cargo-apk
        if: contains(matrix.platform.target, 'android')
        run: cargo install cargo-apk

      - name: Run cargo build for ${{ matrix.platform.target }}
        shell: bash
        run: cd src-tauri/ && cargo $CMD build --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES --release

      - name: Create macOS DMG
        if: contains(matrix.platform.target, 'darwin')
        run: |
          cd src-tauri/
          cargo install cargo-bundle
          cargo bundle

      - name: Create Windows MSI
        if: contains(matrix.platform.target, 'windows')
        run: |
          cd src-tauri/
          cargo install cargo-wix
          cargo wix

      - name: Create Linux AppImage
        if: contains(matrix.platform.target, 'linux')
        run: |
          cd src-tauri/
          cargo install cargo-make
          cargo make

      - name: Create Linux deb
        if: contains(matrix.platform.target, 'linux')
        run: |
          cd src-tauri/
          cargo install cargo-make
          cargo make

      - name: Create Linux rpm
        if: contains(matrix.platform.target, 'linux')
        run: |
          cd src-tauri/
          cargo install cargo-make
          cargo make

name: ‚ùØ Build Binaries (CI)

on: [push, pull_request]

env:
  APP_NAME: "password-generator-pro"

jobs:
  publish-tauri:
    name: "${{ matrix.platform.target }}"

    strategy:
      fail-fast: false

      matrix:
        platform: [macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: ‚úÖ Checkout code (main branch)
        uses: actions/checkout@v3

      - name: ‚úÖ Setup pNpM 7
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false

      - name: ‚úÖ Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: ‚úÖ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: ‚úÖ Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"

      - name: ‚úÖ Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: ‚úÖ Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y \
              build-essential \
              curl \
              libasound2-dev \
              libayatana-appindicator3-dev \
              libxcb-composite0-dev \
              libgtk-3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.0-dev \
              libxcb-render0-dev \
              libxcb-shape0-dev \
              libxcb-xfixes0-dev \
              patchelf \
              xorg-dev \
              wget \
          sudo apt-get install -y protobuf-compiler

      - name: ‚úÖ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ‚úÖ Building
        run: pnpm run build -- --verbose

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      # Generate the changelog based on git log and template file
      - name: Generate Changelog
        run: |
          # Append version information to CHANGELOG.md
          echo "## Release v${{ env.VERSION }} - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md >> ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md

      - name: ‚úÖ Publishing
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose
          tagName: ${{ env.APP_NAME }}-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: "Password Generator Pro v__VERSION__ üîê"
          releaseBody: ${{ github.workspace }}/CHANGELOG.md
          releaseDraft: true
          prerelease: false
